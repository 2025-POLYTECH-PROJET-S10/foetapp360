{"version":3,"file":"attempt.min.js","sources":["../src/attempt.js"],"sourcesContent":["define(['jquery'], function ($) {\n    return {\n        init: function () {\n            $(\".rotation_hippotrack_container\").each(function () {\n                let rotationhippotrack_container = $(this);\n                let hippotrack_container = rotationhippotrack_container.find(\".hippotrack_container\");\n\n                if (!hippotrack_container.length) { return; }\n\n                let schemaType = hippotrack_container.data(\"schema-type\");\n                if (!schemaType) { return; }\n\n                let targetInteriorImage = hippotrack_container.find(\".\" + schemaType + \"_interieur\");\n                let targetContourImage = hippotrack_container.find(\".\" + schemaType + \"_contour\");\n\n                let rotateSlider = rotationhippotrack_container.find(\".rotate-slider\");\n                let moveSlider = rotationhippotrack_container.find(\".move-axis-slider\");\n\n                let rotationAngle = rotateSlider.val();\n                let translateDistance = moveSlider.val();\n                updateTransform();\n\n                /**\n                 * Met à jour la transformation CSS des images.\n                 */\n                function updateTransform() {\n                    let radian = (rotationAngle * Math.PI) / 180;\n                    let xOffset = translateDistance * Math.sin(radian);\n                    let yOffset = -translateDistance * Math.cos(radian);\n\n                    if (targetInteriorImage.length) {\n                        targetInteriorImage.css(\"transform\", `translate(${xOffset}px, ${yOffset}px) rotate(${rotationAngle}deg)`);\n                    }\n                    if (targetContourImage.length) {\n                        targetContourImage.css(\"transform\", `rotate(${rotationAngle}deg)`);\n                    }\n                }\n\n                rotateSlider.on(\"input\", function () {\n                    rotationAngle = parseInt($(this).val(), 10);\n                    updateTransform();\n                });\n\n                moveSlider.on(\"input\", function () {\n                    translateDistance = parseInt($(this).val(), 10);\n                    updateTransform();\n                });\n            });\n\n            let imageDatabase = JSON.parse(document.getElementById(\"image_database\").dataset.values);\n            $(\".image_cycling_hippotrack_container\").each(function () {\n                let hippotrack_container = $(this);\n                let cyclingImage = hippotrack_container.find(\".hippotrack_attempt_cycling-image_vue_laterale, .hippotrack_attempt_cycling-image_vue_anterieure\");\n\n                let hiddenInput = hippotrack_container.find(\".hippotrack_attempt_selected_position\");\n                let toggleButtonHiddenInput = hippotrack_container.find(\".hippotrack_attempt_toggle_btn_value\");\n                /**\n                 * Met à jour l'image affichée en fonction de la position et de la variation.\n                 */\n                function increaseImage() {\n                    let field = hippotrack_container.find(\".hippotrack_field\");\n                    let inclinaison = toggleButtonHiddenInput.attr(\"value\");\n                    let images = Object.values(imageDatabase[field[0].dataset.values][inclinaison]); // Convertir en tableau indexé\n                    let imageActuelle = cyclingImage.attr(\"src\");\n                    let currentIndex = images.indexOf(imageActuelle);\n                    if (currentIndex === -1) {\n                        currentIndex = 0; // Sécurité : si l’image actuelle n’existe pas dans la liste, commencer à 0\n                    }\n                    currentIndex = currentIndex + 1;\n                    if (currentIndex == images.length) {\n                        currentIndex = 0;\n                    }\n                    cyclingImage.attr(\"src\", images[currentIndex]);\n                    hiddenInput.val(images[currentIndex]);\n                }\n                /**\n                 * Met à jour l'image affichée en fonction de la position et de la variation.\n                 */\n                function decreaseImage() {\n                    let field = hippotrack_container.find(\".hippotrack_field\");\n                    let inclinaison = toggleButtonHiddenInput.attr(\"value\");\n                    let images = Object.values(imageDatabase[field[0].dataset.values][inclinaison]); // Convertir en tableau indexé\n                    let imageActuelle = cyclingImage.attr(\"src\");\n                    let currentIndex = images.indexOf(imageActuelle);\n                    if (currentIndex === -1) {\n                        currentIndex = 0; // Sécurité : si l’image actuelle n’existe pas dans la liste, commencer à 0\n                    }\n                    currentIndex = currentIndex - 1;\n                    if (currentIndex < 0) {\n                        currentIndex = images.length - 1;\n                    }\n                    cyclingImage.attr(\"src\", images[currentIndex]);\n                    hiddenInput.val(images[currentIndex]);\n                }\n                /**\n                 * Update the image when toggling.\n                 * @param {string} previousInclinaison - La clé de l'inclinaison précédente.\n                 */\n                function updateImage(previousInclinaison){\n                    let field = hippotrack_container.find(\".hippotrack_field\");\n                    let images = Object.values(imageDatabase[field[0].dataset.values][previousInclinaison]);\n                    let imageActuelle = cyclingImage.attr(\"src\");\n                    let currentIndex = images.indexOf(imageActuelle);\n                    let correctInclinaison = toggleButtonHiddenInput.attr(\"value\");\n                    let imagesBonInclinaison = Object.values(imageDatabase[field[0].dataset.values][correctInclinaison]);\n                    cyclingImage.attr(\"src\", imagesBonInclinaison[currentIndex]);\n                    hiddenInput.val(imagesBonInclinaison[currentIndex]);\n                }\n                /**\n                 * Met à jour l'inclinaison de l'image.\n                 */\n                function toggleView(){\n                    let inclinaison = toggleButtonHiddenInput.attr(\"value\");\n                    let field = hippotrack_container.find(\".hippotrack_field\");\n                    let images = imageDatabase[field[0].dataset.values];\n                    let inclinaisonKeys = Object.keys(images);\n                    let currentIndex = inclinaisonKeys.indexOf(inclinaison); // Trouver son index\n                    let nextKey;\n                    if (currentIndex !== -1 && currentIndex < Object.keys(images).length - 1) {\n                        nextKey = inclinaisonKeys[currentIndex + 1]; // Clé suivante\n                    } else {\n                        nextKey = inclinaisonKeys[0]; // Clé suivante\n                    }\n                    toggleButtonHiddenInput.attr(\"value\", nextKey);\n                    return inclinaison;\n                }\n\n                hippotrack_container.find(\".hippotrack_attempt_prev-btn\").on(\"click\", function () {\n                    decreaseImage();\n                });\n\n                hippotrack_container.find(\".hippotrack_attempt_next-btn\").on(\"click\", function () {\n                    increaseImage();\n                });\n\n                hippotrack_container.find(\".hippotrack_attempt_toggle_btn\").on(\"click\", function() {\n                    let previousInclinaison = toggleView();\n                    updateImage(previousInclinaison);\n                });\n            });\n\n            // Gestion des onglets et du contenu affiché\n            $(\".attempt_container\").hide();\n            $(\".hippotrack-tab.active\").each(function () {\n                $($(this).data(\"target\")).show();\n                $(this).addClass(\"hippotrack_given_tab_input\");\n            });\n\n            $(\".hippotrack-tab\").click(function () {\n                $(\".hippotrack-tab\").removeClass(\"active\");\n                $(this).addClass(\"active\");\n\n                $(\".attempt_container\").hide();\n                $($(this).data(\"target\")).show();\n            });\n\n            // Gestion message lorsque inputs manquants.\n            document.getElementById(\"submit_attempt\").addEventListener(\"click\", function (event) {\n                let inputs = document.querySelectorAll(\"#attempt_form input[type='text']\");\n                // Vérifier si l'overlay existe déjà\n                let overlay = document.getElementById('attempt_error_overlay');\n                if (!overlay) {\n                    // Créer l'élément overlay si il n'existe pas\n                    overlay = document.createElement('div');\n                    overlay.id = 'attempt_error_overlay';\n                    overlay.innerHTML = `\n                        <p>Veuillez remplir tous les champs.</p>\n                        <button id=\"attempt_close_overlay\">Fermer</button>\n                    `;\n                    document.body.appendChild(overlay);\n                    // Ajouter un gestionnaire d'événements pour fermer l'overlay\n                    document.getElementById(\"attempt_close_overlay\").addEventListener(\"click\", function () {\n                        overlay.style.display = 'none'; // Cache l'overlay\n                    });\n                }\n                // Vérifier si un champ est vide\n                for (let input of inputs) {\n                    if (input.value.trim() === \"\") {\n                        overlay.style.display = 'flex';  // Affiche l'overlay\n                        event.preventDefault(); // Empêche l'envoi du formulaire\n                        return;\n                    }\n                }\n                // Si tout est validé, on cache l'overlay\n                overlay.style.display = 'none';\n            });\n        }\n    };\n});\n"],"names":["define","$","init","each","rotationhippotrack_container","this","hippotrack_container","find","length","schemaType","data","targetInteriorImage","targetContourImage","rotateSlider","moveSlider","rotationAngle","val","translateDistance","updateTransform","radian","Math","PI","xOffset","sin","yOffset","cos","css","on","parseInt","imageDatabase","JSON","parse","document","getElementById","dataset","values","cyclingImage","hiddenInput","toggleButtonHiddenInput","field","inclinaison","attr","images","Object","imageActuelle","currentIndex","indexOf","decreaseImage","increaseImage","previousInclinaison","correctInclinaison","imagesBonInclinaison","updateImage","nextKey","inclinaisonKeys","keys","toggleView","hide","show","addClass","click","removeClass","addEventListener","event","inputs","querySelectorAll","overlay","createElement","id","innerHTML","body","appendChild","style","display","input","value","trim","preventDefault"],"mappings":"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"}