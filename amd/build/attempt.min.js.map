{"version":3,"file":"attempt.min.js","sources":["../src/attempt.js"],"sourcesContent":["define(['jquery'], function($) {\n    return {\n        init: function() {\n            $(\".rotation_hippotrack_container\").each(function() {\n                let rotationhippotrack_container = $(this);\n                let hippotrack_container = rotationhippotrack_container.find(\".hippotrack_container\");\n\n                if (!hippotrack_container.length) { return; }\n\n                let schemaType = hippotrack_container.data(\"schema-type\");\n                if (!schemaType) { return; }\n\n                let targetInteriorImage = hippotrack_container.find(\".\" + schemaType + \"_interieur\");\n                let targetContourImage = hippotrack_container.find(\".\" + schemaType + \"_contour\");\n\n                let rotateSlider = rotationhippotrack_container.find(\".rotate-slider\");\n                let moveSlider = rotationhippotrack_container.find(\".move-axis-slider\");\n\n                let rotationAngle = 0;\n                let translateDistance = 0;\n\n                /**\n                 * Met à jour la transformation CSS des images.\n                 */\n                function updateTransform() {\n                    let radian = (rotationAngle * Math.PI) / 180;\n                    let xOffset = translateDistance * Math.sin(radian);\n                    let yOffset = -translateDistance * Math.cos(radian);\n\n                    if (targetInteriorImage.length) {\n                        targetInteriorImage.css(\"transform\", `translate(${xOffset}px, ${yOffset}px) rotate(${rotationAngle}deg)`);\n                    }\n                    if (targetContourImage.length) {\n                        targetContourImage.css(\"transform\", `rotate(${rotationAngle}deg)`);\n                    }\n                }\n\n                rotateSlider.on(\"input\", function() {\n                    rotationAngle = parseInt($(this).val(), 10);\n                    updateTransform();\n                });\n\n                moveSlider.on(\"input\", function() {\n                    translateDistance = parseInt($(this).val(), 10);\n                    updateTransform();\n                });\n            });\n\n            $(\".image_cycling_hippotrack_container\").each(function() {\n                let hippotrack_container = $(this);\n                let fullPrefix = hippotrack_container.data(\"prefix\") || \"\";\n                let cyclingImage = hippotrack_container.find(\".hippotrack_attempt_cycling-image\");\n                let hiddenInput = hippotrack_container.find(\".hippotrack_attempt_selected_position\");\n\n                let currentPosition = parseInt(cyclingImage.data(\"current\"), 10) || 1;\n                let variation = fullPrefix.includes(\"_bf\") ? \"bf\" : \"mf\";\n                let basePrefix = fullPrefix.replace(/_(bf_|mf_)$/, \"\");\n\n                /**\n                 * Met à jour l'image affichée en fonction de la position et de la variation.\n                 */\n                function updateImage() {\n                    let imagePath = `/mod/hippotrack/pix/${basePrefix}_${variation}_${currentPosition}.png`;\n                    cyclingImage.attr(\"src\", imagePath);\n                    let imageName = `${basePrefix}_${variation}_${currentPosition}`;\n                    hiddenInput.val(imageName);\n                }\n\n                let max_image = 8;\n                let min_image = 1;\n\n                hippotrack_container.find(\".hippotrack_attempt_prev-btn\").on(\"click\", function() {\n                    currentPosition = currentPosition > min_image ? currentPosition - 1 : max_image;\n                    updateImage();\n                });\n\n                hippotrack_container.find(\".hippotrack_attempt_next-btn\").on(\"click\", function() {\n                    currentPosition = currentPosition < max_image ? currentPosition + 1 : min_image;\n                    updateImage();\n                });\n\n                hippotrack_container.find(\".hippotrack_attempt_toggle_btn\").on(\"click\", function() {\n                    variation = (variation === \"bf\") ? \"mf\" : \"bf\";\n                    updateImage();\n                });\n            });\n        }\n    };\n});\n"],"names":["define","$","init","each","rotationhippotrack_container","this","hippotrack_container","find","length","schemaType","data","targetInteriorImage","targetContourImage","rotateSlider","moveSlider","rotationAngle","translateDistance","updateTransform","radian","Math","PI","xOffset","sin","yOffset","cos","css","on","parseInt","val","fullPrefix","cyclingImage","hiddenInput","currentPosition","variation","includes","basePrefix","replace","updateImage","imagePath","attr","imageName"],"mappings":"AAAAA,gCAAO,CAAC,WAAW,SAASC,SACjB,CACHC,KAAM,WACFD,EAAE,kCAAkCE,MAAK,eACjCC,6BAA+BH,EAAEI,MACjCC,qBAAuBF,6BAA6BG,KAAK,6BAExDD,qBAAqBE,kBAEtBC,WAAaH,qBAAqBI,KAAK,mBACtCD,sBAEDE,oBAAsBL,qBAAqBC,KAAK,IAAME,WAAa,cACnEG,mBAAqBN,qBAAqBC,KAAK,IAAME,WAAa,YAElEI,aAAeT,6BAA6BG,KAAK,kBACjDO,WAAaV,6BAA6BG,KAAK,qBAE/CQ,cAAgB,EAChBC,kBAAoB,WAKfC,sBACDC,OAAUH,cAAgBI,KAAKC,GAAM,IACrCC,QAAUL,kBAAoBG,KAAKG,IAAIJ,QACvCK,SAAWP,kBAAoBG,KAAKK,IAAIN,QAExCP,oBAAoBH,QACpBG,oBAAoBc,IAAI,gCAA0BJ,uBAAcE,8BAAqBR,uBAErFH,mBAAmBJ,QACnBI,mBAAmBa,IAAI,6BAAuBV,uBAItDF,aAAaa,GAAG,SAAS,WACrBX,cAAgBY,SAAS1B,EAAEI,MAAMuB,MAAO,IACxCX,qBAGJH,WAAWY,GAAG,SAAS,WACnBV,kBAAoBW,SAAS1B,EAAEI,MAAMuB,MAAO,IAC5CX,wBAIRhB,EAAE,uCAAuCE,MAAK,eACtCG,qBAAuBL,EAAEI,MACzBwB,WAAavB,qBAAqBI,KAAK,WAAa,GACpDoB,aAAexB,qBAAqBC,KAAK,qCACzCwB,YAAczB,qBAAqBC,KAAK,yCAExCyB,gBAAkBL,SAASG,aAAapB,KAAK,WAAY,KAAO,EAChEuB,UAAYJ,WAAWK,SAAS,OAAS,KAAO,KAChDC,WAAaN,WAAWO,QAAQ,cAAe,aAK1CC,kBACDC,wCAAmCH,uBAAcF,sBAAaD,wBAClEF,aAAaS,KAAK,MAAOD,eACrBE,oBAAeL,uBAAcF,sBAAaD,iBAC9CD,YAAYH,IAAIY,WAMpBlC,qBAAqBC,KAAK,gCAAgCmB,GAAG,SAAS,WAClEM,gBAAkBA,gBAHN,EAGoCA,gBAAkB,EAJtD,EAKZK,iBAGJ/B,qBAAqBC,KAAK,gCAAgCmB,GAAG,SAAS,WAClEM,gBAAkBA,gBATN,EASoCA,gBAAkB,EARtD,EASZK,iBAGJ/B,qBAAqBC,KAAK,kCAAkCmB,GAAG,SAAS,WACpEO,UAA2B,OAAdA,UAAsB,KAAO,KAC1CI"}